{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","state","items","serverRequest","bind","$","get","res","console","log","setState","name","this","className","Container","style","marginTop","ItemTable","React","Component","Header","map","item","Item","key","id","date","category","price","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"8OAQMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,IAET,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBALJ,E,6EAQH,IAAD,OACbC,IAAEC,IAAI,wCAAwC,SAAAC,GAC5CC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZR,MAAOK,IACP,WACAC,QAAQC,IAAI,EAAKR,MAAMC,MAAM,GAAGS,c,0CAKpCC,KAAKT,gBACLK,QAAQC,IAAIG,KAAKX,MAAMC,MAAM,M,+BAG7B,OACE,yBAAKW,UAAU,OACb,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAACC,UAAU,QAC3B,uDACA,kBAACC,EAAD,CAAWf,MAAOU,KAAKX,MAAMC,c,GA7BrBgB,IAAMC,WAmClBC,E,YACJ,WAAYpB,GAAQ,qEACZA,I,sEAGN,OACE,yBAAKa,UAAU,8BACb,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,eAAb,gBAGA,uBAAGA,UAAU,QAAb,QACA,uBAAGA,UAAU,eAAb,QACA,uBAAGA,UAAU,QAAb,gB,GAbWK,IAAMC,WAoB3B,SAASF,EAAUjB,GACjB,OACE,yBAAKa,UAAU,gBACb,2BAAOA,UAAU,8BACf,+BACE,4BACE,oCACA,oCACA,wCACA,uCAGJ,+BACGb,EAAME,MAAMmB,KAAI,SAAAC,GAAI,OACnB,kBAACC,EAAD,CAAMD,KAAMA,UAQxB,SAASC,EAAKvB,GACZ,OACE,wBAAIwB,IAAKxB,EAAMsB,KAAKG,IAClB,4BAAKzB,EAAMsB,KAAKI,MAChB,4BAAK1B,EAAMsB,KAAKX,MAChB,4BAAKX,EAAMsB,KAAKK,UAChB,mCAAM3B,EAAMsB,KAAKM,QAKR7B,QCpFK8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.e4e0c145.chunk.js","sourcesContent":["import $ from 'jquery';\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Container } from \"semantic-ui-react\"\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: []\n    };\n    this.serverRequest = this.serverRequest.bind(this);\n  }\n\n  serverRequest(){\n    $.get(\"http://localhost:5000/api/logs/items\", res => {\n      console.log(res);\n      this.setState({\n        items: res\n      },()=>{\n        console.log(this.state.items[0].name)\n      });\n    });\n  }\n  componentDidMount(){\n    this.serverRequest();\n    console.log(this.state.items[2])\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Container style={{marginTop:\"5em\"}}>\n          <h2>Showing your logs here!</h2>\n          <ItemTable items={this.state.items}/>\n        </Container>\n      </div>  \n    )\n  }\n}\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return(\n      <div className=\"ui inverted top fixed menu\">\n        <div className=\"ui container\">\n          <a className=\"header item\">\n            Hockey Stick\n          </a>\n          <a className=\"item\">Home</a>\n          <a className=\"active item\">Logs</a>\n          <a className=\"item\">Export</a>\n        </div>  \n      </div>\n    )\n  }\n}\n\nfunction ItemTable(props) {\n  return (\n    <div className=\"ui container\">\n      <table className=\"ui selectable celled table\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Name</th>\n            <th>Category</th>\n            <th>Price</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.items.map(item => (\n            <Item item={item}/>\n          ))}\n        </tbody>\n      </table>\n    </div>  \n  )\n}\n\nfunction Item(props) {\n  return (\n    <tr key={props.item.id}>\n      <td>{props.item.date}</td>\n      <td>{props.item.name}</td>\n      <td>{props.item.category}</td>\n      <td>Â¥{props.item.price}</td>\n    </tr>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}